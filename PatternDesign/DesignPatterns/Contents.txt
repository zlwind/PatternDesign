创建型：

    C#设计模式(1)――单例模式（Singleton Pattern）

	C#设计模式(2)――简单工厂模式（0Sample Factory Pattern）

    C#设计模式(3)――工厂方法模式（Factory Pattern）

    C#设计模式(4)――抽象工厂模式（Abstract Pattern）

    C#设计模式(5)――建造者模式（Builder Pattern）

    C#设计模式(6)――原型模式（Prototype Pattern）

结构型：

    C#设计模式(7)――适配器模式（Adapter Pattern）

    C#设计模式(8)――桥接模式（Bridge Pattern）

    C#设计模式(9)――装饰者模式（Decorator Pattern）

    C#设计模式(10)――组合模式（Composite Pattern）

    C#设计模式(11)――外观模式（Facade Pattern）

    C#设计模式(12)――享元模式（Flyweight Pattern）

    C#设计模式(13)――代理模式（Proxy Pattern）

行为型：

    C#设计模式(14)――模板方法模式（Template Method）

    C#设计模式(15)――命令模式（Command Pattern）

    C#设计模式(16)――迭代器模式（Iterator Pattern）

    C#设计模式(17)――观察者模式（Observer Pattern）

    C#设计模式(18)――中介者模式（Mediator Pattern）

    C#设计模式(19)――状态模式（State Pattern）

    C#设计模式(20)――策略模式（Stragety Pattern）

    C#设计模式(21)――责任链模式（Chain of Responsibility Pattern）

    C#设计模式(22)――访问者模式（Vistor Pattern）

    C#设计模式(23)――备忘录模式（Memento Pattern）

    C#设计模式(24)――解释器模式（Interpreter Pattern）

参考：
https://www.cnblogs.com/zhili/p/DesignPatternSummery.html
https://www.cnblogs.com/guyun/tag/设计模式/
https://www.cnblogs.com/libingql/category/372277.html
https://www.cnblogs.com/PatrickLiu/p/8242238.html
https://blog.csdn.net/youthon/article/details/7653389
https://www.cnblogs.com/mq0036/p/8288099.html
