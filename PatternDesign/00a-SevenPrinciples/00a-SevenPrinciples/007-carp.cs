using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace _00a_SevenPrinciples
{
    //7.   合成/聚合原则(Composite/Aggregate Reuse Principle,CARP) 
    //     定义：也有人叫做合成复用原则，及尽量使用合成/聚合，尽量不要使用类继承。换句话说，就是能用合成/聚合的地方，绝不用继承。 
    //     为什么要尽量使用合成/聚合而不使用类继承？
    //       1. 对象的继承关系在编译时就定义好了，所以无法在运行时改变从父类继承的子类的实现
    //       2. 子类的实现和它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化
    //       3. 当你复用子类的时候，如果继承下来的实现不适合解决新的问题，则父类必须重写或者被其它更适合的类所替换，这种依赖关系限制了灵活性，
    //          并最终限制了复用性。
    

  //  什么是合成？
  //. 合成表示一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样，
  //    打个比方：人有两个胳膊，胳膊和人就是部分和整体的关系，人去世了，那么胳膊也就没用了，也就是说胳膊和人的生命周期是相同的
  //. 合成关系用实心的菱形+实线来表示
  //什么是聚合？
  //. 聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，
  //    但是B对象并不是A对象的一部分，打个比方：人是群居动物，所以每个人属于一个人群，一个人群可以有多个人，所以人群和人是聚合的关系
}
